/**
*   Definition of Remote API related messages
*
*   Copyright:
*        Copyright Wirepas Ltd 2019 licensed under Apache License, Version 2.0
*        See file LICENSE for full license details.
*/
syntax="proto2";

import "nanopb.proto";
import "commons.proto";

package com.wirepas.proto.wnt;

message RemoteApiRequest {
    // To which devices this request stands for
    repeated uint32 addresses = 1 [(nanopb).max_count = 1024];

    // Sink address to use when sendind data via unicast
    optional uint32 sink_address = 2;

    // Changing the role
    optional BaseRole role = 10;
    optional bool is_cb_mac = 11; // True = low latency, false = low energy
    optional bool is_autorole = 12;

    optional uint32 network_address = 13;
    optional uint32 network_channel = 14;
    optional bytes cipher_key = 15 [(nanopb).max_size = 32];
    optional bytes authentication_key = 16 [(nanopb).max_size = 32];
    optional uint32 channel_map = 17;
    optional uint32 node_address = 18;
}

enum RemoteApiRequestType {
    REMOTE_API_TYPE_BROADCAST = 0;
    REMOTE_API_TYPE_UNICAST = 1;
}

// This is a collection of remote messages currently undergoing
message RemoteApiRequestCollection {
    optional string id = 1 [(nanopb).max_size = 64]; // UUID
    optional RemoteApiRequestType type = 2;
    repeated RemoteApiRequest messages = 3 [(nanopb).max_count = 32];
    optional uint32 rerun_interval_s = 4; // Interval to resend the requests
    optional bool is_cancel = 5;
    optional bool is_close = 6;

    optional uint32 start_time_s_epoch = 10;
    optional uint32 activation_time_s_epoch = 11;
    optional uint32 cancellation_time_s_epoch = 12;
}

// This is a response for remote api responses
enum RemoteApiResponseId {
    OK = 0;
    ACCESS_DENIED = 1;
    WRITE_ONLY_ATTRIBUTE = 2;
    INVALID_BC_REQUEST = 3;
    INVALID_BEGIN = 4;
    NO_SPACE_FOR_RESPONSE = 5;
    INVALID_VALUE = 6;
    INVALID_LENGTH = 7;
    UNKNOWN_REQUEST = 8;
    UNKNOWN_ERROR = 255;
}

message RemoteApiResponse {
    optional uint32 start_time_s_epoch = 1;
    optional uint32 activation_time_s_epoch = 2;
    optional uint32 cancellation_time_s_epoch = 3;
    optional uint32 metadata_update_time_s_epoch = 11;

    optional RemoteApiResponseId configure_result = 21;
    optional RemoteApiResponseId activate_result = 22;
    optional RemoteApiResponseId cancel_result = 23;
    optional RemoteApiResponseId metadata_update_result = 31;
}
