syntax="proto2";

package wirepas.proto.gateway_api;

import "wp_global.proto";

message NodeRole {
    enum BaseRole {
        SINK = 1;
        ROUTER = 2;
        NON_ROUTER = 3;
    }
    required BaseRole role = 1;
    enum RoleFlags {
        LOW_LATENCY = 1;
        AUTOROLE = 2;
    }
    repeated RoleFlags flags = 2;
}

message AccessCycleRange {
    required uint32 min_ms = 1;
    required uint32 max_ms = 2;
}

message ChannelRange {
    required uint32 min_channel = 1;
    required uint32 max_channel = 2;
}

message AppConfigData {
    required uint32 diag_interval_s = 1; // Diagnostics interval in seconds
    required bytes app_config_data = 2; // App config data
    required uint32 seq = 3;
}

message NetworkKeys {
    required bytes cipher = 1;
    required bytes authentication = 2;
}

message ConfigurationDataItem {
    required uint32 endpoint = 1;
    required bytes payload = 2;
}

message SinkReadConfig {
    // Local id to uniquely identify a sink on gateway
    required string sink_id = 1;

    // Sink minimal config
    optional NodeRole node_role = 2;
    optional uint32 node_address = 3;
    optional uint64 network_address = 4;
    optional uint32 network_channel = 5;
    optional AppConfigData app_config = 6;
    optional uint32 channel_map = 7;
    optional bool are_keys_set = 8;
    optional AccessCycleRange current_ac_range = 9;

    // Read only parameters
    optional AccessCycleRange ac_limits = 10;
    optional uint32 max_mtu = 11;
    optional ChannelRange channel_limits = 12;
    optional uint32 hw_magic = 13;
    optional uint32 stack_profile = 14;
    optional uint32 app_config_max_size = 15;
    optional FirmwareVersion firmware_version = 16;

    // State of sink
    optional OnOffState sink_state = 17;

    // Scratchpad info for the sink
    optional ScratchpadInfo stored_scratchpad = 18;
    optional ScratchpadStatus stored_status = 19;
    optional ScratchpadType stored_type = 20;
    optional ScratchpadInfo processed_scratchpad = 21;
    optional uint32 firmware_area_id = 22;
    optional TargetScratchpadAndAction target_and_action = 23; // Unset if sink doesn't support it

    // Only present if CDD_API feature flag is set
    repeated ConfigurationDataItem configuration_data_content = 24;
}

message SinkNewConfig {
    // Local id to uniquely identify a sink on gateway
    required string sink_id = 1;

    // Node minimal config
    optional NodeRole node_role = 2;
    optional uint32 node_address = 3;
    optional uint64 network_address = 4;
    optional uint32 network_channel = 5;
    optional AppConfigData app_config = 6;

    optional uint32 channel_map = 7;
    optional NetworkKeys keys = 8;
    optional AccessCycleRange current_ac_range = 9;

    // State of sink
    optional OnOffState sink_state = 10;
}

message GatewayInfo {
    // Current timestamp when GatewayInfo is generated
    // It is a unix timestamp in s since epoch
    required uint64 current_time_s_epoch = 1;

    // Optional gateway name (gateway manufacturer specific)
    optional string gw_model = 2;

    // Optional gateway version (gateway manufacturer specific)
    optional string gw_version = 3;

    // API version implemented in the gateway
    // This field must be explicitly set from code and must be
    // the one defined in each released version.
    // Current version is 2
    // Version 1: Initial release
    // Version 2: Addition of setScratchpadTargetAndAction
    // It should be replaced by a feature list
    optional uint32 implemented_api_version = 4;

    // Maximun scratchpad size supported by gateway
    // If scratchpad is bigger than the size specified,
    // it must be sent as chunk. If not set, it means that
    // scratchpad can be sent in a single request
    optional uint32 max_scratchpad_size = 5;

    repeated GatewayFeature gw_features = 6;
}

/*
 * Commands definition
 */
 message StatusEvent {
    required EventHeader header = 1;

    // Wirepas Gateway's protobuff message definition version
    // This field is used to represent the version of the
    // protobuff messages as a whole implemented by the
    // gateway. Any breaking change in the message definition
    // must lead to an increment of the version's value reported
    required uint32 version = 2;
    required OnOffState state = 3;

    // Current Gateway config in the status to avoid client asking for it
    // Each time config is changed on a gateway, this status must be updated
    repeated SinkReadConfig configs = 4;

    // Optional gateway name (gateway manufacturer specific)
    optional string gw_model = 5;

    // Optional gateway version (gateway manufacturer specific)
    optional string gw_version = 6;

    // See GatewayInfo for details of this field
    optional uint32 max_scratchpad_size = 7;

    repeated GatewayFeature gw_features = 8;
}

message GetConfigsReq {
    required RequestHeader header = 1;
}

message GetConfigsResp {
    required ResponseHeader header = 1;

    repeated SinkReadConfig configs = 2; // Gateway may have multiple sinks
}

message SetConfigReq {
    required RequestHeader header = 1;

    required SinkNewConfig config = 2;
}

message SetConfigResp {
    required ResponseHeader header = 1;

    // Send back the current config
    required SinkReadConfig config = 2;
}

message GetGwInfoReq {
    required RequestHeader header = 1;
}

message GetGwInfoResp {
    required ResponseHeader header = 1;

    required GatewayInfo info = 2;
}

message SetConfigurationDataItemReq {
    required RequestHeader header = 1;

    // 0-length payloads are used to clear an entry
    required ConfigurationDataItem configuration_data_item = 2;
}

message SetConfigurationDataItemResp {
    required ResponseHeader header = 1;
}

message GetConfigurationDataItemReq {
    required RequestHeader header = 1;

    required uint32 endpoint = 2;
}

message GetConfigurationDataItemResp {
    required ResponseHeader header = 1;

    optional ConfigurationDataItem configuration_data_item = 2;
}
