syntax="proto2";

package wirepas.proto.gateway_api;

import "wp_global.proto";
import "error.proto";
// import "nanopb.proto";

enum ScratchpadType {
    BLANK = 1;
    PRESENT = 2;
    PROCESS = 3;
}

enum ScratchpadStatus {
    SUCCESS = 1;
    NEW = 2;
    ERROR = 3;
}

enum ScratchpadAction {
    // Will be the default value in case it is later extended
    UNKNOWN_ACTION = 0;
    // No propagation, no processing of scratchpad
    NO_OTAP = 1;
    // Propagate the target scratchpad but no processing
    PROPAGATE_ONLY = 2;
    // Propagate the target scratchpad and process it as soon as received
    PROPAGATE_AND_PROCESS = 3;
    // Propagate the target scratchpad and process it after delay (starting when scratchpad is present and this info received)
    PROPAGATE_AND_PROCESS_WITH_DELAY = 4;
    // Otap propagation works as before with sequence comparison and processing through remote API
    LEGACY_OTAP = 5;
}

enum ProcessingDelay {
    UNKNOWN_DELAY = 0;
    TEN_MINUTES = 1;
    THIRTY_MINUTES = 2;
    ONE_HOUR = 3;
    SIX_HOURS = 4;
    ONE_DAY = 5;
    TWO_DAYS = 6;
    FIVE_DAYS = 7;
}


message ScratchpadInfo {
    required uint32 len = 1;
    required uint32 crc = 2;
    required uint32 seq = 3;
}

message TargetScratchpadAndAction {
    required ScratchpadAction action = 1; // What is the action to perform with the current scratchpad
    optional uint32 target_sequence = 2; // Between 1 and 254 (if missing using local scratchpad sequence if present)
    optional uint32 target_crc = 3; // Between 0 and 0xffff (if missing using local scratchpad CRC if present)
    oneof param {
       ProcessingDelay delay = 4; // Delay parameter for action PROPAGATE_AND_PROCESS_WITH_DELAY
       uint32 raw = 5; // Raw parameter for the action (between 0 and 255)
    }
}

/*
 * Request/Responses definition
 */
message GetScratchpadStatusReq {
    required RequestHeader header = 1;
}

message GetScratchpadStatusResp {
    required ResponseHeader header = 1;

    optional ScratchpadInfo stored_scratchpad = 2;
    optional ScratchpadStatus stored_status = 3;
    optional ScratchpadType stored_type = 4;
    optional ScratchpadInfo processed_scratchpad = 5;
    optional uint32 firmware_area_id = 6;

    optional TargetScratchpadAndAction target_and_action = 7; // Unset if sink doesn't support it
}

message UploadScratchpadReq {
    required RequestHeader header = 1;

    required uint32 seq = 2;
    // If scratchpad is not set, it clears the stored scratchpad
    optional bytes scratchpad = 3 /*[(nanopb).max_size = 1048576]*/;  // 1MB
}

message UploadScratchpadResp {
    required ResponseHeader header = 1;
}

message ProcessScratchpadReq {
    required RequestHeader header = 1;
}

message ProcessScratchpadResp {
    required ResponseHeader header = 1;
}

message SetScratchpadTargetAndActionReq {
    required RequestHeader header = 1;

    required TargetScratchpadAndAction target_and_action = 2;
}

message SetScratchpadTargetAndActionResp {
    required ResponseHeader header = 1;
}
